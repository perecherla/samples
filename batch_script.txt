#!/usr/bin/env python3
import os
from datetime import datetime

# Define source and destination directories
source_dir = "source_path"
destin_dir = "dest_path"

# Define environment variables
ENV = "/export/enterprise-docs/stfin/batchjobs/keys"
property_file = f"{ENV}/env.properties"

# Fetch prefix from environment properties
with open(property_file, "r") as f:
    for line in f:
        if line.startswith("BATCH.JOB.ENV"):
            prefix = line.split(":")[1].strip()
            break

# Determine doc prefix based on prefix
if prefix == "UAT":
    doc_prefix = "STG"
    print("doc_prefix changed to:", doc_prefix)
elif prefix == "COB":
    doc_prefix = "PROD"
    print("doc_prefix changed to:", doc_prefix)
else:
    doc_prefix = prefix
    print("doc_prefix:", doc_prefix)

# Set current directory
curr_dir = "/export/enterprise-docs/stfin/batchjobs/uploadreports"

# Define logfile and errfile
timestamp = datetime.now().strftime("%m-%d-%Y.%H:%M:%S")
logfile = f"{curr_dir}/logs/file_moving_report_{timestamp}.log"
errfile = f"{curr_dir}/logs/file_moving_report_{timestamp}.err"

# Delete existing error file and log file
if os.path.exists(errfile):
    os.remove(errfile)
if os.path.exists(logfile):
    os.remove(logfile)

print("Attempt To Copy The Report Files From FTP Area To Application Area...")

# Count files to be moved
filescount = len(os.listdir(source_dir))

if filescount == 0:
    print("Nothing to move...")
else:
    print(f"{filescount} File(s) To Be Moved To Application Area...")
    
    for filename in os.listdir(source_dir):
        filesize = os.path.getsize(os.path.join(source_dir, filename))
        parent_doc_id = filename.split("_")[0]
        filename = "".join(filename.split("")[1:])
        
        print("Check: Availability of the report to be moved...")
        
        # Here you can implement the logic for moving files without calling Java
        # Continue with the rest of your script...